/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ru.hse.software.construction.service

import ru.hse.software.construction.repository.UserRepository
import ru.hse.software.construction.controller.CinemaController
import ru.hse.software.construction.model.Movie
import ru.hse.software.construction.model.Session
import ru.hse.software.construction.repository.CinemaRepository
import ru.hse.software.construction.repository.JsonCinemaApp
import ru.hse.software.construction.view.MovieSchedule
import ru.hse.software.construction.view.Menu
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import kotlin.math.sqrt

fun main() {
    val cinemaController = CinemaController()

    // Получение путей для хранения данных кинотеатра и аккаунтов
    println("Введите путь для хранения данных кинотеатра (например, '/Users/david/Downloads/CinemaApp'): ")
    val cinemaPath = readlnOrNull() ?: "/Users/david/Downloads/CinemaApp"
    println("Введите название файла для хранения данных кинотеатра (например, 'movies.json'): ")
    val cinemaFileName = readlnOrNull() ?: "movies.json"

    if (!cinemaController.isFilePathValid(cinemaPath, cinemaFileName)) {
        return
    }

    println("Введите путь для хранения аккаунтов (например, '/Users/david/Downloads/CinemaApp'): ")
    val usersPath = readlnOrNull() ?: "/Users/david/LibraryApp"
    println("Введите название файла для хранения аккаунтов (например, 'users.json'): ")
    val usersFileName = readlnOrNull() ?: "users.json"

    if (!cinemaController.isFilePathValid(usersPath, usersFileName)) {
        return
    }

    val cinemaRepository = CinemaRepository(cinemaPath, cinemaFileName)
    val cinema = JsonCinemaApp(cinemaRepository, mutableListOf())

    val userRepository = UserRepository(usersPath, usersFileName)
    val registrar = SimpleRegistrar(userRepository)
    val authenticator = SimpleAuthenticator(userRepository)

    val ticketService = TicketService(cinema, cinemaRepository)

    val isStartInitiated = true
    val isContinuationInitiated = true
    var isLoggedIn = false

    val menu = Menu()

    var inputUsername = ""

    while (isStartInitiated) {
        menu.displayAuthorizationMenu()
        when (readlnOrNull()?.toIntOrNull()) {
            1 -> {
                println("Введите логин: ")
                inputUsername = readlnOrNull() ?: continue

                while (!registrar.isUsernameAvailable(inputUsername)) {
                    println("Этот логин занят! Если этот аккаунт принадлежит Вам, попробуйте зайти в него.")
                    println("Введите логин: ")
                    inputUsername = readlnOrNull() ?: continue
                }

                println("Введите пароль (минимум 8 символов): ")
                var newPassword = readlnOrNull() ?: continue

                while (!registrar.isPasswordStrong((newPassword))) {
                    println("Этот пароль слишком слабый! Попробуйте снова.")
                    println("Введите пароль (минимум 8 символов): ")
                    newPassword = readlnOrNull() ?: continue
                }


                registrar.register(inputUsername, newPassword)
                println("Регистрация прошла успешно.")
                isLoggedIn = true
            }

            2 -> {
                println("Введите логин: ")
                inputUsername = readlnOrNull() ?: continue

                while (registrar.isUsernameAvailable(inputUsername)) {
                    println("Такого аккаунта не существует! Попробуйте снова.")
                    println("Введите логин: ")
                    inputUsername = readlnOrNull() ?: continue
                }

                println("Введите пароль: ")
                var inputPassword = readlnOrNull() ?: continue

                var incorrectAttemptsCount = 0

                while (!authenticator.authenticate(inputUsername, inputPassword)) {
                    incorrectAttemptsCount++
                    if (incorrectAttemptsCount != 3) {
                        println("Некорректный пароль! Попробуйте снова.")
                        println("Введите пароль: ")
                        inputPassword = readlnOrNull() ?: continue
                    } else {
                        println("Некорректный пароль! Превышено количество допустимых попыток!")
                        return
                    }
                }

                println("Аутентификация прошла успешно.")
                isLoggedIn = true
            }

            0 -> {
                println("Выход из программы")
                return
            }

            else -> {
                println("Некорректный выбор")
            }
        }

        if (isLoggedIn) {
            while (isContinuationInitiated) {
                menu.displayMainFunctionsMenu()
                when (readlnOrNull()?.toIntOrNull()) {
                    1 -> {
                        // Вывести афишу
                        val movieSchedule = MovieSchedule(cinema.getAllMovies())
                        movieSchedule.displayMovieSchedule()
                    }
                    2 -> {
                        // Продать билеты
                        cinemaController.sellOrReturnTickets(ticketService, cinema, "продажи")
                    }
                    3 -> {
                        // Сделать возврат билетов
                        cinemaController.sellOrReturnTickets(ticketService, cinema, "возврата")
                    }
                    4 -> {
                        // Вывести визуализацию зала сеанса
                        val movieAndSession = cinemaController.selectMovieAndSession(cinema) ?: continue

                        val (_, selectedSession) = movieAndSession
                        menu.displayHallLayout(selectedSession)
                    }
                    5 -> {
                        // Редактировать данные фильма
                        menu.displayEditingChoicesMenu()
                        when (readlnOrNull()?.toIntOrNull()) {
                            1 -> {
                                // Редактировать название фильма
                                val selectedMovie = cinemaController.selectOnlyMovie(cinema) ?: continue

                                println("Введите новое название фильма: ")
                                val newTitle = readlnOrNull() ?: continue
                                selectedMovie.changeTitle(newTitle)
                                println("Название фильма успешно изменено")

                                cinemaRepository.saveMovies(cinema.getAllMovies())
                            }
                            2 -> {
                                // Редактировать описание фильма
                                val selectedMovie = cinemaController.selectOnlyMovie(cinema) ?: continue

                                println("Введите новое описание фильма: ")
                                val newDescription = readlnOrNull() ?: continue
                                selectedMovie.changeDescription(newDescription)
                                println("Описание фильма успешно изменено")

                                cinemaRepository.saveMovies(cinema.getAllMovies())
                            }
                            3 -> {
                                // Редактировать расписание конкретного сеанса
                                val movieAndSession = cinemaController.selectMovieAndSession(cinema) ?: continue

                                val (selectedMovie, selectedSession) = movieAndSession

                                println("Введите новое время начала сеанса в формате 'yyyy-MM-dd HH:mm': ")
                                val newStartDateTimeString = readlnOrNull() ?: continue
                                val newStartDateTime = LocalDateTime.parse(newStartDateTimeString, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"))

                                try {
                                    selectedMovie.changeSessionSchedule(selectedSession.sessionId, newStartDateTime)
                                    cinemaRepository.saveMovies(cinema.getAllMovies())
                                    println("Расписание сеанса успешно изменено")
                                } catch (e: IllegalArgumentException) {
                                    println("Ошибка при изменении расписания сеанса: ${e.message}")
                                }
                            }
                            0 -> {
                                println("Возврат в предыдущее меню")
                            }
                            else -> {
                                println("Некорректный выбор")
                            }
                        }
                    }
                    6 -> {
                        // Добавить фильм в прокат
                        cinemaController.addNewMovieToStock(cinema, cinemaRepository)
                    }
                    7 -> {
                        // Убрать фильм с проката
                        cinemaController.removeMovieFromStock(cinema)
                    }
                    8 -> {
                        // Показать кассовые сборы фильма
                        val selectedMovie = cinemaController.selectOnlyMovie(cinema) ?: continue

                        menu.displayBoxOffice(selectedMovie)
                    }
                    9 -> {
                        menu.displayChangePasswordMenu()
                        when (readlnOrNull()?.toIntOrNull()) {
                            1 -> {
                                val user = userRepository.getUserByUsername(inputUsername)
                                if (user != null) {
                                    println("Введите новый пароль (минимум 8 символов): ")
                                    var newPassword = readlnOrNull() ?: return

                                    while (!registrar.isPasswordStrong(newPassword)) {
                                        println("Этот пароль слишком слабый! Попробуйте снова.")
                                        println("Введите новый пароль (минимум 8 символов): ")
                                        newPassword = readlnOrNull() ?: continue
                                    }
                                    authenticator.updateUserPassword(inputUsername, newPassword)
                                    println("Пароль пользователя обновлен.")
                                } else {
                                    throw IllegalArgumentException("Пользователь с логином $inputUsername не найден.")
                                }
                            }
                            0 -> {
                                println("Возврат в предыдущее меню")
                            }
                            else -> {
                                println("Некорректный выбор")
                            }
                        }
                    }
                    0 -> {
                        println("Выход из программы")
                        return
                    }
                    else -> {
                        println("Некорректный выбор")
                    }
                }
            }
        }
    }
}